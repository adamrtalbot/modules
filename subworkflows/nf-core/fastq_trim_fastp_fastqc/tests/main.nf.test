nextflow_workflow {

    name "Test Workflow FASTQ_TRIM_FASTP_FASTQC"
    script "subworkflows/nf-core/fastq_trim_fastp_fastqc/main.nf"
    workflow "FASTQ_TRIM_FASTP_FASTQC"

    test("test_fastq_trim_fastp_fastqc_single_end") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                Channel.fromPath(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                    .flatten()
                    .map { it -> tuple( [ id: 'test' ], [ it ] ) }
                    .set { input_files }
                save_trimmed_fail = false
                save_merged       = false
                skip_fastqc       = false
                skip_fastp        = false

                input[0] = input_files
                input[1] = []
                input[2] = save_trimmed_fail
                input[3] = save_merged
                input[4] = skip_fastqc
                input[5] = skip_fastp
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() == 3
            assert snapshot(
                workflow.out.reads, 
                workflow.out.trim_json, 
                workflow.out.trim_reads_fail, 
                workflow.out.trim_reads_merged, 
                workflow.out.versions
            ).match()
            assert workflow.out.trim_json.size() == 1
            assert workflow.out.trim_html.size() == 1
            assert workflow.out.trim_log.size() == 1
            assert workflow.out.fastqc_raw_html.size() == 0
            assert workflow.out.fastqc_raw_zip.size() == 0
            assert workflow.out.fastqc_trim_html.size() == 1
            assert workflow.out.fastqc_trim_zip.size() == 1
        }

    }


    test("test_fastq_trim_fastp_fastqc_paired_end") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                in_1 = Channel.fromPath(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                in_2 = Channel.fromPath(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                in_1.mix(in_2)
                    .collect()
                    .map { it -> tuple( [ id: 'test' ], it ) }
                    .set { input_files }
                save_trimmed_fail = false
                save_merged       = false
                skip_fastqc       = false
                skip_fastp        = false

                input[0] = input_files
                input[1] = []
                input[2] = save_trimmed_fail
                input[3] = save_merged
                input[4] = skip_fastqc
                input[5] = skip_fastp
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() == 3
            assert snapshot(
                workflow.out.reads, 
                workflow.out.trim_json, 
                workflow.out.trim_reads_fail, 
                workflow.out.trim_reads_merged, 
                workflow.out.versions
            ).match()
            assert workflow.out.trim_json.size() == 1
            assert workflow.out.trim_html.size() == 1
            assert workflow.out.trim_log.size() == 1
            assert workflow.out.fastqc_raw_html.size() == 0
            assert workflow.out.fastqc_raw_zip.size() == 0
            assert workflow.out.fastqc_trim_html.size() == 1
            assert workflow.out.fastqc_trim_zip.size() == 1
        }

    }


    test("test_fastq_trim_fastp_fastqc_interleaved") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            workflow {
                """
                Channel.fromPath(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                    .flatten()
                    .map { it -> tuple( [ id: 'test' ], it ) }
                    .set { input_files }
                save_trimmed_fail = false
                save_merged       = false
                skip_fastqc       = false
                skip_fastp        = false

                input[0] = input_files
                input[1] = []
                input[2] = save_trimmed_fail
                input[3] = save_merged
                input[4] = skip_fastqc
                input[5] = skip_fastp
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.succeeded().size() == 3
            assert snapshot(
                workflow.out.reads, 
                workflow.out.trim_json, 
                workflow.out.trim_reads_fail, 
                workflow.out.trim_reads_merged, 
                workflow.out.versions
            ).match()
            assert workflow.out.trim_json.size() == 1
            assert workflow.out.trim_html.size() == 1
            assert workflow.out.trim_log.size() == 1
            assert workflow.out.fastqc_raw_html.size() == 0
            assert workflow.out.fastqc_raw_zip.size() == 0
            assert workflow.out.fastqc_trim_html.size() == 1
            assert workflow.out.fastqc_trim_zip.size() == 1
        }

    }

}
